/*
 * x l S Q L  
 * (c) Jim Caprioli, NiLOSTEP.com
 * See xlSQL-license.txt for license details
 *
 */
package com.nilostep.xlsql.jdbc;

import com.nilostep.xlsql.database.sql.ICommand;
import java.sql.*;

public class xlPreparedStatement extends xlStatement implements PreparedStatement {

    private String psql;
    private PreparedStatement dbPstm;
    
    //~ Constructors иииииииииииииииииииииииииииииииииииииииииииииииииииииииииии

    /**
    * Constructs a new PreparedStatementImpl object.
    *
    */
    protected xlPreparedStatement(xlConnection con, PreparedStatement pstm, 
                                             String sql) throws SQLException {
        super(con,pstm);
        dbPstm = pstm;
        psql = sql;
    }

    //~ Methods ииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииии

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#addBatch
    */
    public void addBatch() throws SQLException {
        dbPstm.addBatch();
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#clearParameters
    */
    public void clearParameters() throws SQLException {
        dbPstm.clearParameters();
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#execute
    */
    public boolean execute() throws SQLException {
        boolean ret;
        ICommand cmd = xlCon.xlsql.parseSql(psql);        
        if (cmd.execAllowed()) {
            // dbStm may throw an SQLException..., pass on to client
            ret = dbPstm.execute();
            cmd.execute();
        }
        else {
            throw new SQLException("xlSQL: execute not allowed");
        }
        return ret;
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#execute
    */
    public boolean execute(String sql, int autoGeneratedKeys)
                    throws SQLException {
        boolean ret;
        ICommand cmd = xlCon.xlsql.parseSql(sql);        
        if (cmd.execAllowed()) {
            // dbStm may throw an SQLException..., pass on to client
            ret = dbPstm.execute(sql);
            cmd.execute();
        }
        else {
            throw new SQLException("xlSQL: execute not allowed");
        }
        return ret;
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#executeQuery
    */
    public ResultSet executeQuery() throws SQLException {
        ResultSet ret = dbPstm.executeQuery();
        return ret;
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#executeUpdate
    */
    public int executeUpdate() throws SQLException {
        int ret;
        ICommand cmd = xlCon.xlsql.parseSql(psql); 
        if (cmd.execAllowed()) {
            // dbStm may throw an SQLException..., pass on to client
            ret = dbPstm.executeUpdate(psql);
            cmd.execute();
        }
        else {
            throw new SQLException("xlSQL: execute not allowed");
        }
        return ret;
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#getMetaData
    */
    public ResultSetMetaData getMetaData() throws SQLException {
        return dbPstm.getMetaData();
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#getParameterMetaData
    */
    public ParameterMetaData getParameterMetaData() throws SQLException {
        ParameterMetaData dbPsMeta = dbPstm.getParameterMetaData();
        ParameterMetaData psMeta = new xlParameterMetaData(this, dbPsMeta);
        return psMeta;
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setArray
    */
    public void setArray(int i, Array x) throws SQLException {
        dbPstm.setArray(i, x);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setAsciiStream
    */
    public void setAsciiStream(int parameterIndex, java.io.InputStream x, 
                               int length) throws SQLException {
        dbPstm.setAsciiStream(parameterIndex, x, length);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setBigDecimal
    */
    public void setBigDecimal(int parameterIndex, java.math.BigDecimal x)
                       throws SQLException {
        dbPstm.setBigDecimal(parameterIndex, x);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setBinaryStream
    */
    public void setBinaryStream(int parameterIndex, java.io.InputStream x, 
                                int length) throws SQLException {
        dbPstm.setBinaryStream(parameterIndex, x, length);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setBlob
    */
    public void setBlob(int i, Blob x) throws SQLException {
        dbPstm.setBlob(i, x);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setBoolean
    */
    public void setBoolean(int parameterIndex, boolean x)
                    throws SQLException {
        dbPstm.setBoolean(parameterIndex, x);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setByte
    */
    public void setByte(int parameterIndex, byte x) throws SQLException {
        dbPstm.setByte(parameterIndex, x);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setBytes
    */
    public void setBytes(int parameterIndex, byte[] x)
                  throws SQLException {
        dbPstm.setBytes(parameterIndex, x);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setCharacterStream
    */
    public void setCharacterStream(int parameterIndex, java.io.Reader reader, 
                                   int length) throws SQLException {
        dbPstm.setCharacterStream(parameterIndex, reader, length);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setClob
    */
    public void setClob(int i, Clob x) throws SQLException {
        dbPstm.setClob(i, x);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setCursorName
    */
    public void setCursorName(String name) throws SQLException {
        dbPstm.setCursorName(name);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setDate
    */
    public void setDate(int parameterIndex, java.sql.Date x)
                 throws SQLException {
        dbPstm.setDate(parameterIndex, x);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setDate
    */
    public void setDate(int parameterIndex, java.sql.Date x, 
                        java.util.Calendar cal) throws SQLException {
        dbPstm.setDate(parameterIndex, x, cal);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setDouble
    */
    public void setDouble(int parameterIndex, double x)
                   throws SQLException {
        dbPstm.setDouble(parameterIndex, x);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setFloat
    */
    public void setFloat(int parameterIndex, float x) throws SQLException {
        dbPstm.setFloat(parameterIndex, x);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setInt
    */
    public void setInt(int parameterIndex, int x) throws SQLException {
        dbPstm.setInt(parameterIndex, x);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setLong
    */
    public void setLong(int parameterIndex, long x) throws SQLException {
         dbPstm.setLong(parameterIndex, x);
   }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setNull
    */
    public void setNull(int parameterIndex, int sqlType)
                 throws SQLException {
        dbPstm.setNull(parameterIndex, sqlType);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setNull
    */
    public void setNull(int paramIndex, int sqlType, String typeName)
                 throws SQLException {
        dbPstm.setNull(paramIndex, sqlType, typeName);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setObject
    */
    public void setObject(int parameterIndex, Object x)
                   throws SQLException {
        dbPstm.setObject(parameterIndex, x);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setObject
    */
    public void setObject(int parameterIndex, Object x, int targetSqlType)
                   throws SQLException {
        dbPstm.setObject(parameterIndex, x, targetSqlType);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setObject
    */
    public void setObject(int parameterIndex, Object x, int targetSqlType, 
                          int scale) throws SQLException {
        dbPstm.setObject(parameterIndex, x, targetSqlType);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setRef
    */
    public void setRef(int i, Ref x) throws SQLException {
        dbPstm.setRef(i, x);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setShort
    */
    public void setShort(int parameterIndex, short x) throws SQLException {
        dbPstm.setShort(parameterIndex, x);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setString
    */
    public void setString(int parameterIndex, String x)
                   throws SQLException {
        dbPstm.setString(parameterIndex, x);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setTime
    */
    public void setTime(int parameterIndex, java.sql.Time x)
                 throws SQLException {
        dbPstm.setTime(parameterIndex, x);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setTime
    */
    public void setTime(int parameterIndex, java.sql.Time x, 
                        java.util.Calendar cal) throws SQLException {
        dbPstm.setTime(parameterIndex, x, cal);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setTimestamp
    */
    public void setTimestamp(int parameterIndex, java.sql.Timestamp x)
                      throws SQLException {
        dbPstm.setTimestamp(parameterIndex, x);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setTimestamp
    */
    public void setTimestamp(int parameterIndex, java.sql.Timestamp x, 
                             java.util.Calendar cal) throws SQLException {
        dbPstm.setTimestamp(parameterIndex, x, cal);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setURL
    */
    public void setURL(int parameterIndex, java.net.URL x)
                throws SQLException {
        dbPstm.setURL(parameterIndex, x);
    }

    /**
    * Implements method in interface java.sql.PreparedStatement
    * @see java.sql.PreparedStatement#setUnicodeStream
    */
    public void setUnicodeStream(int parameterIndex, java.io.InputStream x, 
                                 int length) throws SQLException {
        dbPstm.setUnicodeStream(parameterIndex, x, length);
    }
}